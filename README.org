* Initial step 
when isntalling arch with arch installer, in the options 
  1. bootloader use sddm
  2. filesystem use ext4
  3. profile desktop i recommend grub as backup in case something beaks and for initial setup
  4. audio profile
  5. kernals , linux and if you are in nvidia gpu use linux-zen else linux-lts
  6. aditional packages git, base-devel, vivaldi(personal choice), neovim, fish, networkmanager, yazi, kitty, ttf-jetbrains-mono-nerd, ripgrep, gcc, make, xorg-xinput, dmenu, brightnessctl
  7. if you have multiple monitors i recomend arandr, xrandr 
* After initial step is finished and you rebooted 
  1. Enable networkmanager with ~sudo systemctl enable --now NetworkManager.service~
  2. enable pipewire for audio with 
     - ~sudo systemctl enable --now pipewire pipewire-pulse.socket~
     - ~sudo systemctl start pipewire pipewire-pulse.socket~
       * if this commands dont work try but you might need to re do it in dwm later again
         - ~systemctl --user enable pipewire pipewire-pulse~
         - ~systemctl --user start pipewire pipewire-pulse~
  3. Check your local in case its wrong and if you enabled multilib with the following commands
     - ~sudo nvim /etc/locale.gen~ for me its  el_GR.UTF-8 UTF-8
     - ~sudo locale-gen~
     - ~sudo nvim /etc/pacman.conf~ uncomment multilib
     - ~sudo pacman -Syu~
  4. Change to fish shell with ~chsh -s /usr/bin/fish~
  5. make a git dir with ~mkdir ~/git~
  6. setup nvim with nvchad with 
     - ~git clone https://github.com/NvChad/starter ~/.config/nvim && nvim~
  7. now git clone dwm and st with 
     - ~git clone https://git.suckless.org/dwm ~/.config/dwm~
     - ~git clone https://git.suckless.org/st ~/.config/st~
     - now go to the dwm and st dir and run ~sudo make clean install~
  8. now create the sddm xsession file with 
     - ~sudo nvim /usr/share/xsessions/dwm.desktop~
     - paste this in the file 
  #+begin_src shell
  [Desktop Entry]
  Encoding=UTF-8
  Name=DWM
  Comment=Dynamic Window Manager
  # Exec=dwm
  Exec=/usr/local/bin/startdwm.sh # use script to set a wallpaper brefore dwm and other stuff
  Icon=dwm
  Type=XSession

  #+end_src
  * script example
  #+begin_src shell
  #!/bin/sh
  cleanup() {
      pkill -f polybar
      exit 0
  }
  trap cleanup TERM INT

  # merge xresources
  xrdb -merge ~/.Xresources

  #set wallpaper
  feh --bg-scale /usr/share/backgrounds/archlinux/arch-wallpaper.jpg 
  # key layout toggle
  setxkbmap -layout us,gr -option 'grp:alt_shift_toggle' 

  # how fast keys repeat if you hold them down
  xset r rate 200 50 ## delay 200ms, rate 50 keys per second

  # if you have multiple monitors use arandr to set them up and then download the config {xyzname.sh} with the last icon open it and copy paste it here 

  # keep windows open after exit
  while true; do
      dwm 2> ~/.dwm.log
  done &

  # pollybar open 
  ~/.config/polybar/launch.sh &

  #+end_src
  * and dont forget to ~chmod +x /usr/local/bin/startdwm.sh~ else it wont run
  9. then go to .config/dwm/config.h and edit the keybinds and font size i recomend for 
     - font size 12-18 depending on your screen size
     - change Mod1Mask to Mod4Mask (super/windows key) check the modkeys in the terminal with ~xmodmap~
     - create a ~static const chat *term[] = { "kitty", NULL };~ to open terminal with super+enter
     - make/edit keybinds for
       * ~{ MODKEY,                       XK_Return,      spawn,          {.v = term } },~ to open kitty terminal
       * ~{ MODKEY,                       XK_z,          zoom,          {0} },~ change the zoom key
       * ~{ MODKEY,                       XK_q,          killclient,          {0} },~ to close a window
       * ~{ MODKEY,ShiftMask            XK_q,          quit,          {0} },~ kill key to exit dwm when you make changes
     - if you used the script then instead of the modkey,shift q quit do this 
       * ~{ MODKEY,ShiftMask            XK_r,          quit,          {0} },~ restart dwm changes 
       * ~{ MODKEY,ShiftMask            XK_q,          spawn,          {.v = (const char*[]){"pkill", "dwm", NULL}}},~ quit dwm
     - then run ~make clean install~
  10. now if you are using an laptop and want to enable natural scroling like me do the following
     - ~xinput list~ to find your touchpad name
     - ~xinput set-prop "your touchpad name" "libinput Natural Scrolling Enabled" 1~
     - to make it permanent create a file with ~sudo nvim /etc/X11/xorg.conf.d/40-libinput.conf~
     - paste this in the file 
       #+begin_src shell
       Section "InputClass"
         Identifier "libinput touchpad catchall"
         MatchIsTouchpad "on"
         MatchDevicePath "/dev/input/event*"
         Driver "libinput"
         Option "NaturalScrolling" "true"
       EndSection
       #+end_src
     - if you want it for mouse aswell also add
       #+begin_src shell
       Section "InputClass"
         Identifier "libinput pointer catchall"
         MatchIsPointer "on"
         MatchDevicePath "/dev/input/event*"
         Driver "libinput"
         Option "NaturalScrolling" "true"
       EndSection
       #+end_src
   11. for the fkeys add 
       - ~#include <X11/XF86keysym.h>~ after thedefine under the modkeys 
         * keybinds
           - ~{ 0,                       XF86XK_AudioMute,          spawn,          {SHCMD("pactl set-sink-mute 0 toggle")} },~
           - ~{ 0,                       XF86XK_AudioLowerVolume,   spawn,          {SHCMD("pactl set-sink-volume 0 -5%")} },~
           - ~{ 0,                       XF86XK_AudioRaiseVolume,   spawn,          {SHCMD("pactl set-sink-volume 0 +5%")} },~
           - ~{ 0,                       XF86XK_MonBrightnessDown,  spawn,          {SHCMD("brightnessctl set 5%-")} },~
           - ~{ 0,                       XF86XK_MonBrightnessUp,    spawn,          {SHCMD("brightnessctl set 5%+")} },~
         - then run ~sudo make clean install~
   12. now you can exit gnome and login to dwm with sddm
* Scren-tearing {ducking nvidia}
if you get screen tearing of any kind download picom, nvidia-settings and make a
    1. ~sudo nvim .config/picom.conf~
       - add this in the file 
         #+begin_src shell
         backend="glx";
         vsync=true;
         fading=false;
         #+end_src
     2. and then inside the  /usr/local/bin/startdwm.sh before while loop add 
        - ~picom &~
     3. if you are using grub do this  ~sudo vim /etc/default/grub~
        - ~GRUB_CMDLINE_LINUX_DEFAULT="loglevel=3 quiet nvidia-drm.modeset=1"~
          #+begin_src shell
sudo grub-mkconfig -o /boot/grub/grub.cfg
sudo pacman -S  plasma-wayland-protocols
          #+end_src
     4. also check the following file for nvidia cards again
        - ~sudo vim /etc/mkinitcpio.conf~
        - modules should have this options in them ~MODULES=(... nvidia nvidia_modeset nvidia_uvm nvidia_drm ...)~
     5. then create this file
        - ~sudo vim /etc/modprobe.d/nvidia.conf~
        - and add the following options ~nvidia_drm modeset=1 fbdev=1~
     6. then run
        #+begin_src shell
        sudo mkinitcpio -P
        #+end_src
        - if this files baucuase boot is full you will need either to expand it or re install arch with bigger boot partition
      7. then reboot system
* Customization

** How do I modify config.h?
config.h can be edited just like any other C source code file.
It contains definitions of variables that are going to be used by dwm.c 
and therefore it is vital that the file is always up to date. The default 
Makefile distributed with dwm will not overwrite your customised config.h 
with the contents of config.def.h, even if it was updated in the latest git pull.
Therefore, you should always compare your customised config.h with config.def.h 
and make sure you include any changes to the latter in your config.h.

** How do I modify config.mk?
config.mk can be edited just like any other text file.
It contains definitions of variables that are going to 
be used inside Makefile. Unlike config.h, config.mk does 
not have a config.def.mk (a default Makefile). Therefore,
during an update of your repository you may run into 
conflicts if the original config.mk is edited.

two good configs for ides are [[https://github.com/siduck/chadwm][chadwm]] and [[https://github.com/BreadOnPenguins/dwm][breadonpenguins dwm]]
  1. if you want to install a font for example my favorite monaspace radon [[https://github.com/githubnext/monaspace#monaspace][Download here]]
     - download the font and extract it
     - create a dir in 
       * ~sudo mkdir -p /usr/local/share/fonts/m~
     - copy the fonts there 
       * ~sudo cp ~/Downloads/monaspace-0.0.0/NerdFonts/Monaspace\ Radon/* /usr/local/share/fonts/m/~
     - then run ~fc-cache -fv~
     - change the font in config.h 
       * ~static const char *fonts[] = { "MonaspaceRadonNF:size=14" };~
     - then run ~sudo make clean install~
     - and reboot system
  2. open aplication in specific workspace
     - go to config.h and add in rules section for example for firefox
       * ~{ "Vivaldi-stable",  NULL,       NULL,       1 << 0,       0,           -1 },~
     - then run ~sudo make clean install~
     - now firefox will open in workspace 1
     - or for kitty terminal
       * ~{ "kitty",  NULL,       NULL,       1 << 1,       0,           -1 },~
     - then run ~sudo make clean install~
   3. make custom open commands example rofi 
        - go to config.h and add in commands section
          * ~static const char *rofi[] = { "rofi", "-show", "drun", "-theme", "~~/.config/rofi/config.rasi" NULL };~
        - then in keybinds section add
          * ~{ MODKEY,                       XK_d,          spawn,          {.v = rofi } },~
        - then run ~sudo make clean install~
          
if we don't want any window class to be treated in a special way, we need to 
initialize rules with at least one element:
#+begin_src shell
static Rule rules[] = {
	/* class      instance    title       tags mask     isfloating   monitor */
	{ NULL,       NULL,       NULL,       0,            False,       -1 },
};
#+end_src

** Patches 
Patches are custom codes from dwm users to make dwm better {less patches == less change it breaks and its more stable} but if you want to add some cool features you can use them
how to use them 
*Note that many patches make changes config.def.h instead of config.h. Either move those changes also to config.h, or add rm config.h to the clean target in the Makefile.*
  1. go to [[https://dwm.suckless.org/patches/][patches site]] and find the patch you want
  2. download the patch file
  3. go to your dwm dir in .config/dwm
  4. crate a patches dir with ~mkdir patches~
  5. move your patches or install them there
  6. run ~patch -p1 < /path/to/patch/file~
     - bettter way to be able to check for errors undo patches etc is to use 
       * ~git apply --check --verbose /path/to/patch/file~
         - --check will see what will happen if we apply the patch so if we have an error we can see it
         - if you get an error change --check to --reject and it will create a .rej file with the changes that didnt apply so you can manually add them to the config.h
  7. if it gives you an error read it carefully and see what is wrong usually its a missing ; or , or something small
  8. then run ~sudo make clean install~
  9. then restart dwm with super+shift+r
    
- *When patching i recommend to have 2 backups 1 of the original dwm so you can see where the the diff correct locations are meant to go and a 2 one that you will make after each patch so if something breaks you can go back to the last working version*
  
- *You should first make patches that change major behaivor of the wm and then visual ones since visual once have less change of breaking and are less important*
    
*** my patches listed by priority
***** Alternative/extra to the ones billow
- https://dwm.suckless.org/patches/xresources/ #merge .xresources on start alternative to xrdb patch with extra that you can cange more stuff then just colors
- https://dwm.suckless.org/patches/windowfollow/ #alternative window following behavior to viewontag patch
- https://dwm.suckless.org/patches/mpdcontrol/ #mpd server controls for keybinds
- https://dwm.suckless.org/patches/decoration_hints/ #make dwm respect if some apps dont want borders cause it can cause issues like vlv, chromium, etc
- https://dwm.suckless.org/patches/canfocusfloating/ #skip floating windows when you cycle focus when enabled
- https://dwm.suckless.org/patches/tag-previews/ #preview workspaces by hovering dwm bar with mouse or dwmblocks bar {i dont think this will work with polybar or non dwmbars}
- https://dwm.suckless.org/patches/notitle/ #no titlebar
- https://dwm.suckless.org/patches/moveontagmon/ #move floating window if monitor is changed
- https://dwm.suckless.org/patches/floatrules/ #more advanced floating rules {can be nice if you dont use the center floating patch}
- https://dwm.suckless.org/patches/defaulttag/ #change the default tag dwm opens when it starts
- https://dwm.suckless.org/patches/colorschemes/ #alternative to xrdb and xresources patch to change colorschemes with a keybind from preset ones

***** Both laptop and desktop
- https://dwm.suckless.org/patches/gaplessgrid/ ✔️ OR https://dwm.suckless.org/patches/gridmode/ ❌ OR https://dwm.suckless.org/patches/nrowgrid/ ❌ #Grid layout for windows
- https://dwm.suckless.org/patches/attachaside/ ✔️ #when using tiled layout keep master window as master
- https://dwm.suckless.org/patches/ewmhtags/ ✔️ AND https://dwm.suckless.org/patches/anybar/ ✔️ #make polybar work
- https://dwm.suckless.org/patches/scratchpad/ ✔️ ️#open a terminal with super+shift+enter that floats and is always on top
- https://dwm.suckless.org/patches/focusadjacenttag/ ✔️ OR https://dwm.suckless.org/patches/stacker/ ✔️ OR https://dwm.suckless.org/patches/movestack/ ❌ #focus window left/right or swap them
- https://dwm.suckless.org/patches/viewontag/ ✔️ #follow the window to the send tag 
- https://dwm.suckless.org/patches/actualfullscreen/ ✔️ #fullscreen your window
- https://dwm.suckless.org/patches/preventfocusshift/ ✔️ #exit fullscreen when you open a new window
- https://dwm.suckless.org/patches/tiledmove/ ✔️ #move windows with mouse but keep them tiled
- https://dwm.suckless.org/patches/sticky/ ✔️ #make a window sticky so it shows in all workspaces
- https://dwm.suckless.org/patches/ispermanent/ #fix for killclient to not accidentaly close sticky windows
- https://dwm.suckless.org/patches/smartborders/ #no borders when only one window is open
- https://dwm.suckless.org/patches/fadeinactive/ OR https://dwm.suckless.org/patches/clientopacity/ #fade inactive windows
- https://dwm.suckless.org/patches/alttab2/ #alt tab like in windows
- https://dwm.suckless.org/patches/center/ OR https://dwm.suckless.org/patches/togglefloatingcenter/ #open floating windows in the center of the screen first uses a rule secont always does it for all floating windows

****** nice but not required 
- https://dwm.suckless.org/patches/xrdb/ #merge .Xresources on start so you can change colors without recompiling like if you use [[https://github.com/eylles/pywal16][pywal]]
- https://dwm.suckless.org/patches/preserveonrestart/ OR https://dwm.suckless.org/patches/restoreafterrestart/ #remember open windows and their tags on restart
- https://dwm.suckless.org/patches/restartsig/ #restart dwm without quitting it {here since my script can do it already but meabe some patch might need it to work}
- https://dwm.suckless.org/patches/cool_autostart/ OR https://dwm.suckless.org/patches/autostart/ #run a script on dwm start for example to set a wallpaper with feh, start pipewire, set xkbmap etc {its in nice but not required cause i think the startdwm.sh script can do what this does already *second one might be worth it tho since it gives you some nice options*}
- https://dwm.suckless.org/patches/vanitygaps/ OR https://dwm.suckless.org/patches/uselessgap/ OR https://dwm.suckless.org/patches/functionalgaps/ OR  #gaps between windows

***** Desktop only
- https://dwm.suckless.org/patches/focusmonmouse/ #moves mouse to selected monitor {basicly a fix for multimonitor setups}
- https://dwm.suckless.org/patches/fixmultimon/ # if mouse goes to another monitor dont change focus to that monitor {basicly a fix for multimonitor setups}
- https://dwm.suckless.org/patches/torus/ #no matter what edge the mouse lives it goes to the other screen edge {i am not sure if it will work for more then 2 monitors}
- https://dwm.suckless.org/patches/autostarttags/ #open specific apps in specific workspaces on start { its here cause if you have 1 monitor it can be annoying to have apps open in workspaces you cant see}
- https://dwm.suckless.org/patches/single_tagset/ #only one tagset for all monitors instead of multiple ones

***** Laptop only
- https://dwm.suckless.org/patches/gestures/ #use touchpad gestures to change workspace, open terminal etc
if this dosent work try this 

DWM itself doesn't handle touchpad gestures directly since it's a window manager, not an input handler. However, you can achieve 3-finger swipe gestures to switch workspaces/tags using **libinput-gestures** with DWM. Here's how:

## **Install libinput-gestures:**

```bash
# Install dependencies
sudo pacman -S libinput wmctrl xdotool

# Install libinput-gestures from AUR
yay -S libinput-gestures
# or
git clone https://aur.archlinux.org/libinput-gestures.git
cd libinput-gestures
makepkg -si
```

## **Add yourself to input group:**

```bash
sudo usermod -a -G input $USER
# Log out and back in for group changes to take effect
```

## **Create gesture configuration:**

```bash
# Create config file
mkdir -p ~/.config
nano ~/.config/libinput-gestures.conf
```

Add this configuration:
```bash
# 3-finger swipe gestures for DWM tag switching
# Swipe right (3 fingers) = go to next tag (right workspace)
gesture swipe right 3 xdotool key super+Right

# Swipe left (3 fingers) = go to previous tag (left workspace)  
gesture swipe left 3 xdotool key super+Left

# Alternative: Use DWM's default tag switching keys
# gesture swipe right 3 xdotool key super+period
# gesture swipe left 3 xdotool key super+comma

# Optional: 4-finger gestures
# gesture swipe up 4 xdotool key super+Return
# gesture swipe down 4 xdotool key super+shift+c
```

## **Configure DWM for workspace cycling:**

You'll need to add key bindings to your `config.h` if you don't have them:

```c
// In your dwm config.h, add these key bindings:
static const Key keys[] = {
    // ... your existing keys ...
    
    // Cycle through tags with Super+Left/Right
    { MODKEY,              XK_Right,  view,           {.ui = ~0} },
    { MODKEY,              XK_Left,   view,           {.ui = ~0} },
    
    // Or use focusmon for multi-monitor setups
    { MODKEY,              XK_Right,  focusmon,       {.i = +1} },
    { MODKEY,              XK_Left,   focusmon,       {.i = -1} },
};
```

## **Alternative: Better tag cycling patch**

For proper tag cycling, apply this function to your DWM:

```c
// Add this function to dwm.c
void
shiftview(const Arg *arg) {
    Arg shifted;
    if(arg->i > 0) // left circular shift
        shifted.ui = (selmon->tagset[selmon->seltags] << arg->i)
           | (selmon->tagset[selmon->seltags] >> (LENGTH(tags) - arg->i));
    else // right circular shift
        shifted.ui = selmon->tagset[selmon->seltags] >> (- arg->i)
           | selmon->tagset[selmon->seltags] << (LENGTH(tags) + arg->i);
    view(&shifted);
}

// Add to your key bindings:
{ MODKEY,              XK_Right,  shiftview,      {.i = +1} },
{ MODKEY,              XK_Left,   shiftview,      {.i = -1} },
```

## **Start libinput-gestures:**

```bash
# Start the service
libinput-gestures-setup start

# Enable it to start automatically
libinput-gestures-setup autostart

# Check status
libinput-gestures-setup status
```

## **Test your setup:**

```bash
# Test if gestures are detected
libinput-gestures -d

# This will show debug output when you make gestures
```

## **Troubleshooting:**

If gestures don't work:

```bash
# Check if you're in the input group
groups $USER

# Test libinput directly
sudo libinput debug-events

# Make sure your touchpad supports gestures
libinput list-devices
```

## **Alternative tools:**

- **Fusuma** (Ruby-based, more features)
- **Touchegg** (More GUI-oriented)

The libinput-gestures approach is the most lightweight and works well with DWM. The key is mapping the gestures to keyboard shortcuts that DWM understands.

After setting this up, 3-finger swipe left will go to the previous tag, and 3-finger swipe right will go to the next tag, exactly as you requested.
