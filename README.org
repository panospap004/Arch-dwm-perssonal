* Initial step 
when isntalling arch with arch installer, in the options 
  1. loginmanager use sddm
  2. filesystem use ext4
  3. profile desktop i recommend gnome as backup in case something beaks and for initial setup
  4. bootloader use grub
  5. audio profile pipewire
  6. kernals , linux and if you are in nvidia gpu use linux-zen else linux-lts
  7. aditional packages git, base-devel, vivaldi(personal choice), neovim, fish, networkmanager, yazi, kitty, ttf-jetbrains-mono-nerd, ripgrep, gcc, make, xorg-xinput, dmenu, brightnessctl
  8. if you have multiple monitors i recomend arandr, xrandr 
* After initial step is finished and you rebooted 
  1. Enable networkmanager with ~sudo systemctl enable --now NetworkManager.service~
  2. enable pipewire for audio with 
     - ~sudo systemctl enable --now pipewire pipewire-pulse.socket~
     - ~sudo systemctl start pipewire pipewire-pulse.socket~
       * if this commands dont work try but you might need to redo it in dwm later again
         - ~systemctl --user enable pipewire pipewire-pulse~
         - ~systemctl --user start pipewire pipewire-pulse~
  3. Check your locals in case its wrong and if you enabled multilib with the following commands
     - ~sudo nvim /etc/locale.gen~ for me its  el_GR.UTF-8 UTF-8
     - ~sudo locale-gen~
     - ~sudo nvim /etc/pacman.conf~ uncomment multilib
     - ~sudo pacman -Syu~
  4. Change to fish shell with ~chsh -s /usr/bin/fish~
  5. make a git dir with ~mkdir ~/git~ #optional just to keep your git clonses organized
  6. setup nvim with nvchad with to work with accept if you have your own config
     - ~git clone https://github.com/NvChad/starter ~/.config/nvim && nvim~
  7. now git clone dwm and st with {st is not required but nice to have as a backup terminal} {if you are using mine dwm and download them from here and place those in the config}
     - ~git clone https://git.suckless.org/dwm ~/.config/dwm~
     - ~git clone https://git.suckless.org/st ~/.config/st~
     - now go to the dwm and st dir and run ~sudo make clean install~
  8. now create the sddm xsession file with 
     - ~sudo nvim /usr/share/xsessions/dwm.desktop~
     - paste this in the file 
  #+begin_src shell
  [Desktop Entry]
  Encoding=UTF-8
  Name=DWM
  Comment=Dynamic Window Manager
  # Exec=dwm
  Exec=/usr/local/bin/startdwm.sh # use script to set a wallpaper brefore dwm and other stuff
  Icon=dwm
  Type=XSession

  #+end_src
  * script example
  #+begin_src shell
  #!/bin/sh
  cleanup() {
      pkill -f polybar
      exit 0
  }
  trap cleanup TERM INT

  # merge xresources
  xrdb -merge ~/.Xresources

  #set wallpaper
  feh --bg-scale /usr/share/backgrounds/archlinux/arch-wallpaper.jpg 
  # key layout toggle
  setxkbmap -layout us,gr -option 'grp:alt_shift_toggle' 

  # how fast keys repeat if you hold them down
  xset r rate 200 50 ## delay 200ms, rate 50 keys per second

  # if you have multiple monitors use arandr to set them up and then download the config {xyzname.sh} with the last icon open it and copy paste it here 

  # keep windows open after exit
  while true; do
      dwm 2> ~/.dwm.log
  done &

  # pollybar open 
  ~/.config/polybar/launch.sh &

  #+end_src
  * and dont forget to ~chmod +x /usr/local/bin/startdwm.sh~ else it wont run
  9. then go to .config/dwm/config.h and edit the keybinds and font size i recomend for 
     - font size 12-18 depending on your screen size
     - change Mod1Mask to Mod4Mask (super/windows key) check the modkeys in the terminal with ~xmodmap~
     - create a ~static const chat *term[] = { "kitty", NULL };~ to open terminal with super+enter
     - make/edit keybinds for
       * ~{ MODKEY,                       XK_Return,      spawn,          {.v = term } },~ to open kitty terminal
       * ~{ MODKEY,                       XK_z,          zoom,          {0} },~ change the zoom key
       * ~{ MODKEY,                       XK_q,          killclient,          {0} },~ to close a window
       * ~{ MODKEY,ShiftMask            XK_q,          quit,          {0} },~ kill key to exit dwm when you make changes
     - if you used the script then instead of the modkey,shift q quit do this 
       * ~{ MODKEY,ShiftMask            XK_r,          quit,          {0} },~ restart dwm changes 
       * ~{ MODKEY,ShiftMask            XK_q,          spawn,          {.v = (const char*[]){"pkill", "dwm", NULL}}},~ quit dwm
     - then run ~make clean install~
  10. now if you are using an laptop and want to enable natural scroling like me do the following
     - ~xinput list~ to find your touchpad name
     - ~xinput set-prop "your touchpad name" "libinput Natural Scrolling Enabled" 1~
     - to make it permanent create a file with ~sudo nvim /etc/X11/xorg.conf.d/40-libinput.conf~
     - paste this in the file 
       #+begin_src shell
       Section "InputClass"
         Identifier "libinput touchpad catchall"
         MatchIsTouchpad "on"
         MatchDevicePath "/dev/input/event*"
         Driver "libinput"
         Option "NaturalScrolling" "true"
       EndSection
       #+end_src
     - if you want it for mouse aswell also add
       #+begin_src shell
       Section "InputClass"
         Identifier "libinput pointer catchall"
         MatchIsPointer "on"
         MatchDevicePath "/dev/input/event*"
         Driver "libinput"
         Option "NaturalScrolling" "true"
       EndSection
       #+end_src
   11. for the fkeys add 
       - ~#include <X11/XF86keysym.h>~ after thedefine under the modkeys 
         * keybinds
           - ~{ 0,                       XF86XK_AudioMute,          spawn,          {SHCMD("pactl set-sink-mute 0 toggle")} },~
           - ~{ 0,                       XF86XK_AudioLowerVolume,   spawn,          {SHCMD("pactl set-sink-volume 0 -5%")} },~
           - ~{ 0,                       XF86XK_AudioRaiseVolume,   spawn,          {SHCMD("pactl set-sink-volume 0 +5%")} },~
           - ~{ 0,                       XF86XK_MonBrightnessDown,  spawn,          {SHCMD("brightnessctl set 5%-")} },~
           - ~{ 0,                       XF86XK_MonBrightnessUp,    spawn,          {SHCMD("brightnessctl set 5%+")} },~
         - then run ~sudo make clean install~
   12. now you can exit gnome and login to dwm with sddm
* Scren-tearing {ducking nvidia}
if you get screen tearing of any kind download picom, nvidia-settings and make a
    1. ~sudo nvim .config/picom.conf~
       - add this in the file 
         #+begin_src shell
         backend="glx";
         vsync=true;
         fading=true; #if you have nvidia an the windows wigle first restart dwm just in case it bugs sometimes else set this to false
         fade-in-step=0.07;
         fade-out-step=0.07;
         fade-delta=10;
         mark-wmwin-focused=true;
         mark-ovredir-focused=true;
         detect-client-opacity=true;
         inactive-opacity=0.95;
         active-opacity=1.0;
         inactive-opacity-override=true;
         #+end_src
     2. and then inside the  /usr/local/bin/startdwm.sh before while loop add 
        - ~picom &~
     3. if you are using grub do this  ~sudo vim /etc/default/grub~
        - ~GRUB_CMDLINE_LINUX_DEFAULT="loglevel=3 quiet nvidia-drm.modeset=1"~
          #+begin_src shell
sudo grub-mkconfig -o /boot/grub/grub.cfg
sudo pacman -S  plasma-wayland-protocols
          #+end_src
     4. also check the following file for nvidia cards again
        - ~sudo vim /etc/mkinitcpio.conf~
        - modules should have this options in them ~MODULES=(... nvidia nvidia_modeset nvidia_uvm nvidia_drm ...)~
     5. then create this file
        - ~sudo vim /etc/modprobe.d/nvidia.conf~
        - and add the following options ~nvidia_drm modeset=1 fbdev=1~
     6. then run
        #+begin_src shell
        sudo mkinitcpio -P
        #+end_src
        - if this files baucuase boot is full you will need either to expand it or re install arch with bigger boot partition
      7. then reboot system
* Customization

** How do I modify config.h?
config.h can be edited just like any other C source code file.
It contains definitions of variables that are going to be used by dwm.c 
and therefore it is vital that the file is always up to date. The default 
Makefile distributed with dwm will not overwrite your customised config.h 
with the contents of config.def.h, even if it was updated in the latest git pull.
Therefore, you should always compare your customised config.h with config.def.h 
and make sure you include any changes to the latter in your config.h.

** How do I modify config.mk?
config.mk can be edited just like any other text file.
It contains definitions of variables that are going to 
be used inside Makefile. Unlike config.h, config.mk does 
not have a config.def.mk (a default Makefile). Therefore,
during an update of your repository you may run into 
conflicts if the original config.mk is edited.

two good configs for ides are [[https://github.com/siduck/chadwm][chadwm]] and [[https://github.com/BreadOnPenguins/dwm][breadonpenguins dwm]]
  1. if you want to install a font for example my favorite monaspace radon [[https://github.com/githubnext/monaspace#monaspace][Download here]]
     - download the font and extract it
     - create a dir in 
       * ~sudo mkdir -p /usr/local/share/fonts/m~
     - copy the fonts there 
       * ~sudo cp ~/Downloads/monaspace-0.0.0/NerdFonts/Monaspace\ Radon/* /usr/local/share/fonts/m/~
     - then run ~fc-cache -fv~
     - change the font in config.h 
       * ~static const char *fonts[] = { "MonaspaceRadonNF:size=14" };~
     - then run ~sudo make clean install~
     - and reboot system
  2. open aplication in specific workspace
     - go to config.h and add in rules section for example for firefox
       * ~{ "Vivaldi-stable",  NULL,       NULL,       1 << 0,       0,           -1 },~
     - then run ~sudo make clean install~
     - now firefox will open in workspace 1
     - or for kitty terminal
       * ~{ "kitty",  NULL,       NULL,       1 << 1,       0,           -1 },~
     - then run ~sudo make clean install~
   3. make custom open commands example rofi 
        - go to config.h and add in commands section
          * ~static const char *rofi[] = { "rofi", "-show", "drun", "-theme", "~~/.config/rofi/config.rasi" NULL };~
        - then in keybinds section add
          * ~{ MODKEY,                       XK_d,          spawn,          {.v = rofi } },~
        - then run ~sudo make clean install~
          
if we don't want any window class to be treated in a special way, we need to 
initialize rules with at least one element:
#+begin_src shell
static Rule rules[] = {
	/* class      instance    title       tags mask     isfloating   monitor */
	{ NULL,       NULL,       NULL,       0,            False,       -1 },
};
#+end_src

** Patches 
Patches are custom codes from dwm users to make dwm better {less patches == less change it breaks and its more stable} but if you want to add some cool features you can use them
how to use them 
*Note that many patches make changes config.def.h instead of config.h. Either move those changes also to config.h, or add rm config.h to the clean target in the Makefile.*
  1. go to [[https://dwm.suckless.org/patches/][patches site]] and find the patch you want
  2. download the patch file
  3. go to your dwm dir in .config/dwm
  4. crate a patches dir with ~mkdir patches~
  5. move your patches or install them there
  6. run ~patch -p1 < /path/to/patch/file~
     - bettter way to be able to check for errors undo patches etc is to use 
       * ~git apply --check --verbose /path/to/patch/file~
         - --check will see what will happen if we apply the patch so if we have an error we can see it
         - if you get an error change --check to --reject and it will create a .rej file with the changes that didnt apply so you can manually add them to the config.h
  7. if it gives you an error read it carefully and see what is wrong usually its a missing ; or , or something small
  8. then run ~sudo make clean install~
  9. then restart dwm with super+shift+r
    
- *When patching i recommend to have 2 backups 1 of the original dwm so you can see where the the diff correct locations are meant to go and a 2 one that you will make after each patch so if something breaks you can go back to the last working version*
  
- *You should first make patches that change major behaivor of the wm and then visual ones since visual once have less change of breaking and are less important*
    
*** my patches listed by priority
+ ✔️ == used
+ ❌ == not used
***** Alternative/extra to the ones billow
- https://dwm.suckless.org/patches/xresources/ #merge .xresources on start alternative to xrdb patch with extra that you can cange more stuff then just colors
- https://dwm.suckless.org/patches/windowfollow/ ❌ #alternative window following behavior to viewontag patch
- https://dwm.suckless.org/patches/mpdcontrol/ #mpd server controls for keybinds
- https://dwm.suckless.org/patches/decoration_hints/ #make dwm respect if some apps dont want borders cause it can cause issues like vlv, chromium, etc
- https://dwm.suckless.org/patches/canfocusfloating/ ❌ #skip floating windows when you cycle focus when enabled
- https://dwm.suckless.org/patches/tag-previews/ ❌ #preview workspaces by hovering dwm bar with mouse or dwmblocks bar {dosent work with polybar or non dwmbars}
- https://dwm.suckless.org/patches/notitle/ #no titlebar
- https://dwm.suckless.org/patches/moveontagmon/ #move floating window if monitor is changed
- https://dwm.suckless.org/patches/floatrules/ ❌ #more advanced floating rules {can be nice if you dont use the center floating patch}
- https://dwm.suckless.org/patches/defaulttag/ #change the default tag dwm opens when it starts
- https://dwm.suckless.org/patches/colorschemes/ ❌ #alternative to xrdb and xresources patch to change colorschemes with a keybind from preset ones
- https://dwm.suckless.org/patches/smartborders/ ❌ #no borders when only one window is open

***** Both laptop and desktop
- https://dwm.suckless.org/patches/gaplessgrid/ ✔️ OR https://dwm.suckless.org/patches/gridmode/ ❌ OR https://dwm.suckless.org/patches/nrowgrid/ ❌ #Grid layout for windows
- https://dwm.suckless.org/patches/attachaside/ ✔️ #when using tiled layout keep master window as master
- https://dwm.suckless.org/patches/ewmhtags/ ✔️ AND https://dwm.suckless.org/patches/anybar/ ✔️ #make polybar work
- https://dwm.suckless.org/patches/scratchpad/ ✔️ ️#open a terminal with super+shift+enter that floats and is always on top
- https://dwm.suckless.org/patches/focusadjacenttag/ ✔️ OR https://dwm.suckless.org/patches/stacker/ ✔️ OR https://dwm.suckless.org/patches/movestack/ ❌ #focus window left/right or swap them
- https://dwm.suckless.org/patches/viewontag/ ✔️ #follow the window to the send tag 
- https://dwm.suckless.org/patches/actualfullscreen/ ✔️ #fullscreen your window
- https://dwm.suckless.org/patches/preventfocusshift/ ✔️ #exit fullscreen when you open a new window
- https://dwm.suckless.org/patches/tiledmove/ ✔️ #move windows with mouse but keep them tiled
- https://dwm.suckless.org/patches/sticky/ ✔️ #make a window sticky so it shows in all workspaces
- https://dwm.suckless.org/patches/alttab2/ ✔️ #alt tab like in windows
- https://dwm.suckless.org/patches/center/ ❌ OR https://dwm.suckless.org/patches/togglefloatingcenter/ ✔️ #open floating windows in the center of the screen first uses a rule secont always does it for all floating windows

****** nice but not required 
- https://dwm.suckless.org/patches/xrdb/ #merge .Xresources on start so you can change colors without recompiling like if you use [[https://github.com/eylles/pywal16][pywal]]
- https://dwm.suckless.org/patches/preserveonrestart/ ❌ {need to try it with restartsig} OR https://dwm.suckless.org/patches/restoreafterrestart/ ❌ #remember open windows and their tags on restart
- https://dwm.suckless.org/patches/restartsig/ ❌ #restart dwm without quitting it {here since my script can do it already but meabe some patch might need it to work}
- https://dwm.suckless.org/patches/cool_autostart/ ❌ OR https://dwm.suckless.org/patches/autostart/ ❌ #run a script on dwm start for example to set a wallpaper with feh, start pipewire, set xkbmap etc {its in nice but not required cause i think the startdwm.sh script can do what this does already *second one might be worth it tho since it gives you some nice options*}
- https://dwm.suckless.org/patches/vanitygaps/ ❌ OR https://dwm.suckless.org/patches/uselessgap/ ✔️ OR https://dwm.suckless.org/patches/functionalgaps/ ❌ OR  #gaps between windows
- https://dwm.suckless.org/patches/fadeinactive/ ❌ OR https://dwm.suckless.org/patches/clientopacity/  ❌ #fade inactive windows {picom does it already}

***** Desktop only
- https://dwm.suckless.org/patches/focusmonmouse/ #moves mouse to selected monitor {basicly a fix for multimonitor setups}
- https://dwm.suckless.org/patches/fixmultimon/ # if mouse goes to another monitor dont change focus to that monitor {basicly a fix for multimonitor setups}
- https://dwm.suckless.org/patches/torus/ #no matter what edge the mouse lives it goes to the other screen edge {i am not sure if it will work for more then 2 monitors}
- https://dwm.suckless.org/patches/autostarttags/ #open specific apps in specific workspaces on start { its here cause if you have 1 monitor it can be annoying to have apps open in workspaces you cant see}
- https://dwm.suckless.org/patches/single_tagset/ #only one tagset for all monitors instead of multiple ones

***** Laptop only
****** swipe gestures for workspace switching
******* Install libinput-gestures:
#+begin_src shell
# Install dependencies
sudo pacman -S libinput wmctrl xdotool

# Install libinput-gestures from AUR
yay -S libinput-gestures

#+end_src

******* Add yourself to input group:
#+begin_src shell
sudo usermod -a -G input $USER

#+end_src

******* Create gesture configuration:
#+begin_src shell
# Create config file
nvim ~/.config/libinput-gestures.conf

#+end_src

Add this configuration:
#+begin_src shell
# 3-finger swipe gestures for DWM tag switching
# Swipe right (3 fingers) = go to next tag (right workspace)
# Swipe left (3 fingers) = go to previous tag (left workspace)  
gesture swipe left 3 xdotool key --clearmodifiers super+ctrl+bracketleft
gesture swipe right 3 xdotool key --clearmodifiers super+ctrl+bracketright

#+end_src

******* Configure DWM for workspace cycling:
For proper tag cycling, apply this function to your DWM:
#+begin_src c
// Add this function to dwm.c
// under static void spawnbar(); add:
static void shiftview(const Arg *arg);
// and under void spawnbar(){ ... } add:
void
shiftview(const Arg *arg) {
    Arg shifted;
    if(arg->i > 0) // left circular shift
        shifted.ui = (selmon->tagset[selmon->seltags] << arg->i)
           | (selmon->tagset[selmon->seltags] >> (LENGTH(tags) - arg->i));
    else // right circular shift
        shifted.ui = selmon->tagset[selmon->seltags] >> (- arg->i)
           | selmon->tagset[selmon->seltags] << (LENGTH(tags) + arg->i);
    view(&shifted);
}

// Add to your key bindings config.h:
{ MODKEY,              XK_Right,  shiftview,      {.i = +1} },
{ MODKEY,              XK_Left,   shiftview,      {.i = -1} },

#+end_src

******* Start libinput-gestures:
#+begin_src shell
# Start the service
libinput-gestures-setup start

# Enable it to start automatically
libinput-gestures-setup autostart

# If you make a change then run 
libinput-gestures-setup restart

# tou can check if they work by running 
libinput-gestures -d

# Check status
libinput-gestures-setup status

#+end_src

*if start dint work you might need to log out and back in or reboot and also run sudo usermod -a -G input $USER again*

*** pywall {wallpaper and colorscheme generator}
**** links
- [[https://github.com/eylles/pywal16][pywal]]
- [[https://github.com/BreadOnPenguins/scripts][BreadOnPenguins scripts]]
- [[https://github.com/BreadOnPenguins/dots][Breadonpenguins dots]]
- [[https://www.youtube.com/watch?v=O5VVdFWJcak][BreadOnPenguins pywal video]]

**** notes 

**** config

*** poybar {status bar}
**** links
- [[https://github.com/polybar/polybar/wiki][polybar wiki]]
- [[https://polybar.readthedocs.io/en/stable/][polybar docs]]
- [[https://www.reddit.com/r/Polybar/][polybar theme ideas]]
- [[https://github.com/adi1090x/polybar-themes][polybar themes]]
- [[https://github.com/Murzchnvok/polybar-collection][more polybar themes]]
- [[https://gitlab.com/urielzo/polybar-theme/-/tree/mains][even more polybar themes]]
- [[https://github.com/polybar/polybar-scripts][polybar scripts]]

**** notes 
- this might be usefull with polybar for weather widget 
- ~curl wttr.in/athens-greece~
- [[https://www.youtube.com/watch?v=3mGgJbqQLNM][example]]

**** config

*** dmenu {app and script launcher}
**** links
- [[https://tools.suckless.org/dmenu/][dmenu docs]] # i reccomend downloading my dmenu from here and building it like dwm so the scripts never break
- [[https://tools.suckless.org/dmenu/patches/][dmenu patches]]
- [[https://tools.suckless.org/dmenu/scripts/][suckless dmenu scripts]]
- [[https://github.com/BreadOnPenguins/scripts][BreadOnPenguins scripts]]
- [[https://www.youtube.com/watch?v=4JWeU78A95c][BreadOnPenguins dmenu scripts video]]
- [[https://www.youtube.com/watch?v=h_E3ddNQ1xw][BreadOnPenguins dmenu old but usfule still video]]
- [[https://www.youtube.com/watch?v=6NeEJVghF_k][BreadOnPenguins dmenu+clipboard]]
- [[https://www.reddit.com/r/unixporn/comments/siynct/suckless_fully_integrated_themes_across_dwm_st/][idea for alternative to pywal]]
- [[https://github.com/debxp/dmenu-scripts][dmenu scripts]]
- [[https://www.reddit.com/r/linuxquestions/comments/1gtj8gy/what_scripts_do_you_use_through_dmenurofi/][more dmenu scripts]]
- [[https://github.com/nsbgn/scripts][more dmenu and more scripts]]
- [[https://gitlab.com/dwt1/dmscripts][even more dmenu scripts]]

**** notes 

**** config

*** picom {compositor}
**** links
- [[https://picom.app][picom docs]]
- [[https://github.com/BreadOnPenguins/dots][Breadonpenguins dots]]
- [[https://www.youtube.com/watch?v=zRUe9fCs7Qs][BreadOnPenguins picom video]]

**** notes 
- there is an example script in 
- ~/etc/xdg/picom.conf.example~

**** config

*** Dunst {notification daemon}
**** links
- [[https://github.com/BreadOnPenguins/dots][Breadonpenguins dots]]

**** notes

**** config


** Main packages for the config to work {plus the obove ones for nvidia and install}
*check the githubs/sites for install instructions*
 - dwm
 - polybar 
 - dmenu
 - picom
 - pywal16 {install with the aur name python-pywal16}
 - pipx {to install pywal16 backends and other python apps} ~pipx install "pywal16[all]"~ to install the backends
 - feh {wallpaper setter works with pywall}
 - dunst/notify-send/libnotify {dunst recives notifications and notify sends them and libnotify is a dependacy} [[https://www.youtube.com/watch?v=cBx9P3bvDCk][example]] {notify-send is inside libnotify}
 - rofi
 - greenclip || xclip {clipboard manager} [[https://www.youtube.com/watch?v=pF7BCKWd1eM][xclip example]] {grenclip install with yay greenclip-rofi}
 - slock {[[https://www.reddit.com/r/unixporn/comments/momw76/slock_high_performance_blur_effect_for_suckless/][simple slock example]]}, [[https://tools.suckless.org/slock/patches/][slock patches]]
 - mpd {thinking about it might change to sth else} [[https://www.youtube.com/watch?v=6EAID9yopIE][example]]
 - imagemagick {screenshot tools that helps pywall pic colors} [[https://www.youtube.com/watch?v=_qSgTc97bzk&t=27s][example]]
 - libinput-gestures  *if on laptop*


****** clipboard manager 
Greenclip	Probably one of the most popular. Small, fast. Has daemon mode + history + rofi integration. 
ArchWiki
+1
	Mostly text; image support is limited (or needs tweaking). You need to start the daemon (systemd user service or manually). 
GitHub
+1

Clipmenu / clipmenud	Minimalistic, solid. Works with xsel / xclip + clipnotify. Good if you want something simple. Has rofi / dmenu launcher. 
LinuxLinks
+2
openports.pl
+2
	The UI is minimal; no fancy parsing or image support by default. Might need small scripting if you want extra features. Also, clipmenu doesn’t auto-paste (just puts things in clipboard).
Clipton	Has two modes: a watcher (auto-recording copies) and a rofi frontend. More feature rich than super minimal managers. 
GitHub
	It’s mostly text only. Also you’ll need to configure it; may pull in Python dependencies.
Clipcat	Written in Rust; supports X11 and has rofi menu integration. Some nice command / client/server options. 
GitHub
	More complex to set up (daemon + config). Might be overkill if you just want basic clipboard history.
Qlipmon	Has a server + rofi plugin + DBus interface. Good if you want more control / want the clipboard history accessible via rofi directly. 
GitHub
	No persistence so far in some versions; might be less mature. If you need history across reboots, check if that’s supported.
RahulGotrekiya/clipboard-manager	Script that works under X11 & Wayland, uses cliphist + rofi, auto-paste support. Could be nice. 
GitHub
	Depends on cliphist + other utilities; maybe less “packaged” out of the box. You may need to tweak for reliability.
What I’d Recommend (for many setups)

If I had to pick one for simplicity + reliability, I'd go with Greenclip. It’s well-documented, works cleanly with rofi, supports blacklist & configuration, etc.

If you want very minimal, Clipmenu is also excellent.

Example setup for Greenclip

Here’s how you might get Greenclip working:

Install it (on Arch: yay -S rofi-greenclip or similar) or build from source. 
ArchWiki
+1

Configure the config file: ~/.config/greenclip.toml. Some settings to consider:

[greenclip]
history_file = "$HOME/.cache/greenclip.history"
max_history_length = 50
use_primary_selection_as_input = false
blacklisted_applications = ["some_app"]  # to avoid noisy clipboard sources
enable_image_support = false  # unless you really need image picks


Start the daemon:

greenclip daemon


Or enable via systemd --user if you want it to start with your session. 
GitHub
+1

Setup a keyboard shortcut (in your window manager) to launch the rofi picker. For example:

rofi -modi "clipboard:greenclip print" -show clipboard -run-command '{cmd}'


That command will show your history; when you pick one, it will be put in the clipboard. Then you can Ctrl+V (or middle-click depending on your setup) to paste. 
ArchWiki
+1

Optional: blacklist certain applications, avoid picking up every selection (so it’s not spammy). Also maybe combine with xdotool / some tool if you want auto pasting. But that’s more advanced.
